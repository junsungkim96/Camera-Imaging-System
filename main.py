# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'window.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# Python built-in modules
import sys
import os

# Add the parent directory to the system path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


# Pip installed packages
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QInputDialog
import numpy as np

# Local modules
from Illuminant.illuminant import Illuminant
from Scene.scene import Scene
from Optics.optics import OI
from Sensor.sensor import Pixel, Sensor
# from ISP.isp import ISP
# from Object_Detection.objectdetection import *
from UI.illuminant_input import illuminant_Dialog
from UI.scene_input import scene_Dialog
from UI.sensor_input import sensor_Dialog


class Ui_MainWindow(object):
    def __init__(self):
        # Default values for scene parameters
        self.scene_distance = 1.2
        self.scene_hfov = 10
        
        # Default values for sensor parameters
        self.sensor_voltage_swing = 1.15
        self.sensor_well_capacity = 9000
        self.sensor_fill_factor = 0.45
        self.sensor_pixel_size = 0.0000022
        self.sensor_dark_voltage = 0.00001
        self.sensor_read_noise = 0.00096
        self.sensor_prnu = 0.2218
        self.sensor_dsnu = 0.0010
        self.sensor_analog_gain = 1
        self.sensor_analog_offset = 0
        self.sensor_rows = 466
        self.sensor_cols = 642
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1430, 1261)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.illuminant_label = QtWidgets.QLabel(self.centralwidget)
        self.illuminant_label.setGeometry(QtCore.QRect(50, 90, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.illuminant_label.setFont(font)
        self.illuminant_label.setAlignment(QtCore.Qt.AlignCenter)
        self.illuminant_label.setObjectName("illuminant_label")
        self.illuminant_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.illuminant_comboBox.setGeometry(QtCore.QRect(50, 130, 131, 41))
        self.illuminant_comboBox.setObjectName("illuminant_comboBox")
        self.illuminant_comboBox.addItem("")
        self.illuminant_comboBox.setItemText(0, "")
        self.illuminant_comboBox.addItem("")
        self.illuminant_comboBox.addItem("")
        self.illuminant_comboBox.addItem("")
        self.illuminant_comboBox.addItem("")
        self.illuminant_comboBox.addItem("")
        self.illuminant_comboBox.addItem("")
        self.illuminant_comboBox.addItem("")
        self.illuminant_comboBox.addItem("")
        self.illuminant_comboBox.addItem("")
        self.scene_label = QtWidgets.QLabel(self.centralwidget)
        self.scene_label.setGeometry(QtCore.QRect(270, 90, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.scene_label.setFont(font)
        self.scene_label.setAlignment(QtCore.Qt.AlignCenter)
        self.scene_label.setObjectName("scene_label")
        self.optics_label = QtWidgets.QLabel(self.centralwidget)
        self.optics_label.setGeometry(QtCore.QRect(470, 90, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.optics_label.setFont(font)
        self.optics_label.setAlignment(QtCore.Qt.AlignCenter)
        self.optics_label.setObjectName("optics_label")
        self.Runsimulation_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.Runsimulation_pushButton.setGeometry(QtCore.QRect(50, 1170, 1341, 41))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.Runsimulation_pushButton.setFont(font)
        self.Runsimulation_pushButton.setObjectName("Runsimulation_pushButton")
        self.sensor_label = QtWidgets.QLabel(self.centralwidget)
        self.sensor_label.setGeometry(QtCore.QRect(870, 90, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.sensor_label.setFont(font)
        self.sensor_label.setAlignment(QtCore.Qt.AlignCenter)
        self.sensor_label.setObjectName("sensor_label")
        self.isp_label = QtWidgets.QLabel(self.centralwidget)
        self.isp_label.setGeometry(QtCore.QRect(1070, 90, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.isp_label.setFont(font)
        self.isp_label.setAlignment(QtCore.Qt.AlignCenter)
        self.isp_label.setObjectName("isp_label")
        self.objectdetection_label = QtWidgets.QLabel(self.centralwidget)
        self.objectdetection_label.setGeometry(QtCore.QRect(1220, 90, 181, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.objectdetection_label.setFont(font)
        self.objectdetection_label.setAlignment(QtCore.Qt.AlignCenter)
        self.objectdetection_label.setObjectName("objectdetection_label")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(50, 280, 991, 821))
        self.graphicsView.setObjectName("graphicsView")
        self.reset_pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.reset_pushButton.setGeometry(QtCore.QRect(50, 1120, 1341, 41))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.reset_pushButton.setFont(font)
        self.reset_pushButton.setObjectName("reset_pushButton")
        self.illuminant_reset = QtWidgets.QPushButton(self.centralwidget)
        self.illuminant_reset.setGeometry(QtCore.QRect(50, 220, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.illuminant_reset.setFont(font)
        self.illuminant_reset.setObjectName("illuminant_reset")
        self.scene_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.scene_comboBox.setGeometry(QtCore.QRect(250, 130, 131, 41))
        self.scene_comboBox.setStyleSheet("text-align: center;")
        self.scene_comboBox.setObjectName("scene_comboBox")
        self.scene_comboBox.addItem("")
        self.scene_comboBox.setItemText(0, "")
        self.scene_comboBox.addItem("")
        self.scene_comboBox.addItem("")
        self.scene_comboBox.addItem("")
        self.scene_comboBox.addItem("")
        self.scene_comboBox.addItem("")
        self.optics_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.optics_comboBox.setGeometry(QtCore.QRect(450, 130, 131, 41))
        self.optics_comboBox.setStyleSheet("text-align: right;")
        self.optics_comboBox.setObjectName("optics_comboBox")
        self.optics_comboBox.addItem("")
        self.optics_comboBox.setItemText(0, "")
        self.optics_comboBox.addItem("")
        self.optics_comboBox.addItem("")
        self.optics_comboBox.addItem("")
        self.optics_comboBox.addItem("")
        self.optics_comboBox.addItem("")
        self.sensor_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.sensor_comboBox.setGeometry(QtCore.QRect(850, 130, 131, 41))
        self.sensor_comboBox.setObjectName("sensor_comboBox")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.setItemText(0, "")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.sensor_comboBox.addItem("")
        self.isp_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.isp_comboBox.setGeometry(QtCore.QRect(1050, 130, 131, 41))
        self.isp_comboBox.setObjectName("isp_comboBox")
        self.isp_comboBox.addItem("")
        self.isp_comboBox.setItemText(0, "")
        self.isp_comboBox.addItem("")
        self.isp_comboBox.addItem("")
        self.isp_comboBox.addItem("")
        self.isp_comboBox.addItem("")
        self.objectdetection_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.objectdetection_comboBox.setGeometry(QtCore.QRect(1250, 130, 131, 41))
        self.objectdetection_comboBox.setObjectName("objectdetection_comboBox")
        self.objectdetection_comboBox.addItem("")
        self.objectdetection_comboBox.setItemText(0, "")
        self.objectdetection_comboBox.addItem("")
        self.objectdetection_comboBox.addItem("")
        self.scene_reset = QtWidgets.QPushButton(self.centralwidget)
        self.scene_reset.setGeometry(QtCore.QRect(250, 220, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.scene_reset.setFont(font)
        self.scene_reset.setObjectName("scene_reset")
        self.optics_reset = QtWidgets.QPushButton(self.centralwidget)
        self.optics_reset.setGeometry(QtCore.QRect(450, 220, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.optics_reset.setFont(font)
        self.optics_reset.setObjectName("optics_reset")
        self.sensor_reset = QtWidgets.QPushButton(self.centralwidget)
        self.sensor_reset.setGeometry(QtCore.QRect(850, 220, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.sensor_reset.setFont(font)
        self.sensor_reset.setObjectName("sensor_reset")
        self.isp_reset = QtWidgets.QPushButton(self.centralwidget)
        self.isp_reset.setGeometry(QtCore.QRect(1050, 220, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.isp_reset.setFont(font)
        self.isp_reset.setObjectName("isp_reset")
        self.objectdetection_reset = QtWidgets.QPushButton(self.centralwidget)
        self.objectdetection_reset.setGeometry(QtCore.QRect(1250, 220, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.objectdetection_reset.setFont(font)
        self.objectdetection_reset.setObjectName("objectdetection_reset")
        self.mode_label = QtWidgets.QLabel(self.centralwidget)
        self.mode_label.setGeometry(QtCore.QRect(60, 30, 81, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.mode_label.setFont(font)
        self.mode_label.setAlignment(QtCore.Qt.AlignCenter)
        self.mode_label.setObjectName("mode_label")
        self.mode_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.mode_comboBox.setGeometry(QtCore.QRect(160, 30, 171, 41))
        self.mode_comboBox.setObjectName("mode_comboBox")
        self.mode_comboBox.addItem("")
        self.mode_comboBox.addItem("")
        self.illuminant_parameters = QtWidgets.QPushButton(self.centralwidget)
        self.illuminant_parameters.setEnabled(True)
        self.illuminant_parameters.setGeometry(QtCore.QRect(50, 180, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.illuminant_parameters.setFont(font)
        self.illuminant_parameters.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.illuminant_parameters.setObjectName("illuminant_parameters")
        self.sensor_parameters = QtWidgets.QPushButton(self.centralwidget)
        self.sensor_parameters.setGeometry(QtCore.QRect(850, 180, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.sensor_parameters.setFont(font)
        self.sensor_parameters.setObjectName("sensor_parameters")
        self.scene_parameters = QtWidgets.QPushButton(self.centralwidget)
        self.scene_parameters.setGeometry(QtCore.QRect(250, 180, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.scene_parameters.setFont(font)
        self.scene_parameters.setObjectName("scene_parameters")
        self.isp_parameters = QtWidgets.QPushButton(self.centralwidget)
        self.isp_parameters.setGeometry(QtCore.QRect(1050, 180, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.isp_parameters.setFont(font)
        self.isp_parameters.setObjectName("isp_parameters")
        self.optics_parameters = QtWidgets.QPushButton(self.centralwidget)
        self.optics_parameters.setGeometry(QtCore.QRect(450, 180, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.optics_parameters.setFont(font)
        self.optics_parameters.setObjectName("optics_parameters")
        self.objectdetection_parameters = QtWidgets.QPushButton(self.centralwidget)
        self.objectdetection_parameters.setGeometry(QtCore.QRect(1250, 180, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.objectdetection_parameters.setFont(font)
        self.objectdetection_parameters.setObjectName("objectdetection_parameters")
        self.actuator_comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.actuator_comboBox.setGeometry(QtCore.QRect(650, 130, 131, 41))
        self.actuator_comboBox.setStyleSheet("text-align: right;")
        self.actuator_comboBox.setObjectName("actuator_comboBox")
        self.actuator_comboBox.addItem("")
        self.actuator_comboBox.setItemText(0, "")
        self.actuator_parameters = QtWidgets.QPushButton(self.centralwidget)
        self.actuator_parameters.setGeometry(QtCore.QRect(650, 180, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.actuator_parameters.setFont(font)
        self.actuator_parameters.setObjectName("actuator_parameters")
        self.actuator_reset = QtWidgets.QPushButton(self.centralwidget)
        self.actuator_reset.setGeometry(QtCore.QRect(650, 220, 131, 31))
        font = QtGui.QFont()
        font.setFamily("굴림")
        font.setPointSize(10)
        self.actuator_reset.setFont(font)
        self.actuator_reset.setObjectName("actuator_reset")
        self.actuator_label = QtWidgets.QLabel(self.centralwidget)
        self.actuator_label.setGeometry(QtCore.QRect(670, 90, 91, 31))
        font = QtGui.QFont()
        font.setFamily("Yu Gothic UI")
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.actuator_label.setFont(font)
        self.actuator_label.setAlignment(QtCore.Qt.AlignCenter)
        self.actuator_label.setObjectName("actuator_label")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(1050, 280, 341, 821))
        self.textBrowser.setObjectName("textBrowser")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1430, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionSave = QtWidgets.QAction(MainWindow)
        self.actionSave.setObjectName("actionSave")
        self.menuFile.addAction(self.actionNew)
        self.menuFile.addAction(self.actionSave)
        self.menubar.addAction(self.menuFile.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        
        
        # If the "Parameters" pushButtons are clicked
        # self.illuminant_parameters.clicked.connect(self.illuminant_show_inputs)
        self.scene_parameters.clicked.connect(self.scene_show_inputs)
        # self.optics_parameters.clicked.connect(self.optics_show_inputs)
        self.sensor_parameters.clicked.connect(self.sensor_show_inputs)
        # self.isp_parameters.clicked.connect(self.isp_show_inputs)
        # self.objectdetection_parameters.clicked.connect(self.objectdetection_show_inputs)
        
        
        # If the "Reset" pushButtons are clicked
        self.illuminant_reset.clicked.connect(self.reset)
        self.scene_reset.clicked.connect(self.reset_2)
        self.optics_reset.clicked.connect(self.reset_3)
        self.sensor_reset.clicked.connect(self.reset_4)
        self.isp_reset.clicked.connect(self.reset_5)
        self.objectdetection_reset.clicked.connect(self.reset_6)
        
        # If the "Reset All" pushButton is clicked
        self.reset_pushButton.clicked.connect(self.total_reset)
        
        # If the "Run Simulation" pushButton is clicked
        self.Runsimulation_pushButton.clicked.connect(self.run_simulation)
               
    
    ### ILLUMINANT ###
    
    # Illuminant parameters shown
    def illuminant_show_inputs(self):
        self.dialog = QtWidgets.QDialog()
        self.ui = illuminant_Dialog()
        self.ui.setupUi(self.dialog)
        self.ui.pushButton.clicked.connect(self.illuminant_getValues)  # Connect button click to retrieve values and close dialog
        self.dialog.exec()

    # Get values for illuminant parameters
    def illuminant_getValues(self):
        luminance = self.ui.lineEdit.text()
        wave_range = self.ui.lineEdit_2.text()
        radiance = self.ui.lineEdit_3.text()
        
        self.dialog.accept()  
    
    
    ### SCENE ###
    
    # Scene parameters shown
    def scene_show_inputs(self):
        self.dialog = QtWidgets.QDialog()
        self.ui = scene_Dialog()
        self.ui.setupUi(self.dialog)
        
        self.ui.lineEdit.setText(str(self.scene_distance))
        self.ui.lineEdit_2.setText(str(self.scene_hfov))
        
        self.ui.pushButton.clicked.connect(self.scene_getValues)
        self.dialog.exec()

    # Get values for scene parameters
    def scene_getValues(self):
        distance = self.ui.lineEdit.text()
        hfov = self.ui.lineEdit_2.text()
        
        # Print the parameters
        self.scene_distance = float(distance)
        self.scene_hfov = float(hfov)
        
        self.dialog.accept()
    
    
    ### OPTICS ###
        
    # Optics parameters shown
    def optics_show_inputs(self):
        self.dialog = QtWidgets.QDialog()
        self.ui = optics_Dialog()
        self.ui.setupUi(self.dialog)
        self.ui.pushButton.clicked.connect(self.optics_getValues)
        self.dialog.exec()
    
    # Get values for optics parameters
    def optics_getValues(self):
        a = self.ui.lineEdit.text()
        b = self.ui.lineEdit_2.text()
        c = self.ui.lineEdit_3.text()
    
    
    ### SENSOR ###
        
    # Sensor parameters shown
    def sensor_show_inputs(self):
        self.dialog = QtWidgets.QDialog()
        self.ui = sensor_Dialog()
        self.ui.setupUi(self.dialog)
        
        self.ui.lineEdit.setText(str(self.sensor_voltage_swing))
        self.ui.lineEdit_2.setText(str(self.sensor_well_capacity))
        self.ui.lineEdit_3.setText(str(self.sensor_fill_factor))
        self.ui.lineEdit_4.setText(str(self.sensor_pixel_size))
        self.ui.lineEdit_5.setText(str(self.sensor_dark_voltage))
        self.ui.lineEdit_6.setText(str(self.sensor_read_noise))
        self.ui.lineEdit_7.setText(str(self.sensor_prnu))
        self.ui.lineEdit_8.setText(str(self.sensor_dsnu))
        self.ui.lineEdit_9.setText(str(self.sensor_analog_gain))
        self.ui.lineEdit_10.setText(str(self.sensor_analog_offset))
        self.ui.lineEdit_11.setText(str(self.sensor_rows))
        self.ui.lineEdit_12.setText(str(self.sensor_cols))
        
        self.ui.pushButton.clicked.connect(self.sensor_getValues)
        self.dialog.exec()
    
    # Get values for sensor parameters
    def sensor_getValues(self):
        voltage_swing = self.ui.lineEdit.text()
        well_capacity = self.ui.lineEdit_2.text()
        fill_factor = self.ui.lineEdit_3.text()
        pixel_size = self.ui.lineEdit_4.text()
        dark_voltage = self.ui.lineEdit_5.text()
        read_noise = self.ui.lineEdit_6.text()
        prnu = self.ui.lineEdit_6.text()
        dsnu = self.ui.lineEdit_7.text()
        analog_gain = self.ui.lineEdit_8.text()
        analog_offset = self.ui.lineEdit_9.text()
        rows = self.ui.lineEdit_10.text()
        cols = self.ui.lineEdit_11.text()
        
        # Update sensor parameters with the new values
        self.sensor_voltage_swing = float(voltage_swing)
        self.sensor_well_capacity = float(well_capacity)
        self.sensor_fill_factor = float(fill_factor)
        self.sensor_pixel_size = float(pixel_size)
        self.sensor_dark_voltage = float(dark_voltage)
        self.sensor_read_nosie = float(read_noise)
        self.sensor_prnu = float(prnu)
        self.sensor_dsnu = float(dsnu)
        self.sensor_analog_gain = float(analog_gain)
        self.sensor_analog_offset = float(analog_offset)
        self.sensor_rows = float(rows)
        self.sensor_cols = float(cols)
        
        self.dialog.accept()
    
    ### ISP ###
        
    # ISP parameters shown
    def isp_show_inputs(self):
        self.dialog = QtWidgets.QDialog()
        self.ui = isp_Dialog()
        self.ui.setupUi(self.dialog)
        self.ui.pushButton.clicked.connect(self.isp_getValues)
        self.dialog.exec()
    
    # Get values for isp parameters
    def isp_getValues(self):
        a = self.ui.lineEdit.text()
        b = self.ui.lineEdit_2.text()
        c = self.ui.lineEdit_3.text()
        

    ### OBJECT DETECTION ###

    # Objectdetection parameters shown
    def objectdetection_show_inputs(self):
        self.dialog = QtWidgets.QDialog()
        self.ui = objectdetection_Dialog()
        self.ui.setupUi(self.dialog)
        self.ui.pushButton.clicked.connect(self.objectdetection_getValues)
        self.dialog.exec()
        
    # Get values for object_detection parameters
    def objectdetection_getValues(self):
        a = self.ui.lineEdit.text()
        b = self.ui.lineEdit_2.text()
        c = self.ui.lineEdit_3.text()
    
    
    # Reset for illuminant
    def reset(self):
        if self.illuminant_comboBox.currentText() != '':
            self.illuminant_comboBox.setCurrentIndex(0)
            main_window = QtWidgets.QGraphicsScene()
            self.graphicsView.setScene(main_window)
        
    # Rest for scene
    def reset_2(self):
        if self.scene_comboBox.currentText() != '':
            self.scene_comboBox.setCurrentIndex(0)
            main_window = QtWidgets.QGraphicsScene()
            self.graphicsView.setScene(main_window)

    # Reset for optics
    def reset_3(self):
        if self.optics_comboBox.currentText() != '':
            self.optics_comboBox.setCurrentIndex(0)
            main_window = QtWidgets.QGraphicsScene()
            self.graphicsView.setScene(main_window)

    # Reset for sensor
    def reset_4(self):
        if self.sensor_comboBox.currentText() != '':
            self.sensor_comboBox.setCurrentIndex(0)
            main_window = QtWidgets.QGraphicsScene()
            self.graphicsView.setScene(main_window)
        
    # Reset for isp
    def reset_5(self):
        if self.isp_comboBox.currentText() != '':
            self.isp_comboBox.setCurrentIndex(0)
            main_window = QtWidgets.QGraphicsScene()
            self.graphicsView.setScene(main_window)
    
    # Reset for object_detection
    def reset_6(self):
        if self.objectdetection_comboBox.currentText() != '':
            self.objectdetection_comboBox.setCurrentIndex(0)
            main_window = QtWidgets.QGraphicsScene()
            self.graphicsView.setScene(main_window)

    # Reset for illuminant, scene, optics, sensor, isp, object_detection
    def total_reset(self):
        self.illuminant_comboBox.setCurrentIndex(0)
        self.scene_comboBox.setCurrentIndex(0)
        self.optics_comboBox.setCurrentIndex(0)
        self.sensor_comboBox.setCurrentIndex(0)
        self.isp_comboBox.setCurrentIndex(0)
        self.objectdetection_comboBox.setCurrentIndex(0)
        
        
    # Simulation for illuminant, scene, optics, sensor, isp, object_detection
    def run_simulation(self):           
        ### ILLUMINANT ###
        # Get the object name from the illuminant combobox and create an illuminant object using the illuminant_name and illuminant_file           
        illuminant_name = self.illuminant_comboBox.currentText()
        illuminant = Illuminant(illuminant_name = illuminant_name)
        
        
        ### SCENE ###
        # Get the object name from the scene combobox and create a scene object using scene_name and illuminant
        scene_name = self.scene_comboBox.currentText()
        
        if scene_name == '':
            pass
        else:
            scene = Scene(scene_name = scene_name, illuminant = illuminant, scene_distance = self.scene_distance, hfov = self.scene_hfov)
        
            # Get the rgb values from scene 
            h, w, c = scene.rgb.shape
            qimage = QtGui.QImage(scene.rgb.data, w, h, w*c, QtGui.QImage.Format_RGB888)
            pixmap = QtGui.QPixmap.fromImage(qimage)
            
        
        ### OPTICS ###
        # Get the object name from the optics combobox and create an optics object using optics_name and scene
        optics_name = self.optics_comboBox.currentText()
        
        if optics_name == '':
            pass
        else:
            oi = OI(optics_name = optics_name, scene = scene)
            oi.optics_ray_trace()
            
            # Get the rgb values from optics
            h, w, c = oi.rgb.shape
            qimage = QtGui.QImage(oi.rgb.data, w, h, w*c, QtGui.QImage.Format_RGB888)
            pixmap = QtGui.QPixmap.fromImage(qimage)
        
        
        ### SENSOR ###
        # Get the objectName from the sensor combobox
        sensor_name = self.sensor_comboBox.currentText()
        if sensor_name == '':
            pass
        else:
            pixel = Pixel(pixel_type = 'default')
            
            # We set these properties here
            pixel.size = (self.sensor_pixel_size, self.sensor_pixel_size)
            pixel.conversion_gain = self.sensor_voltage_swing / self.sensor_well_capacity
            pixel.voltage_swing = self.sensor_voltage_swing
            pixel.dark_voltage = self.sensor_dark_voltage
            pixel.read_noise_volts = self.sensor_read_noise
            
            sensor = Sensor(sensor_type = sensor_name, pixel = pixel)
            
            # sensor.auto_exposure = 1
            sensor.rows = self.sensor_rows
            sensor.cols = self.sensor_cols
            sensor.sigma_offset_fpn = self.sensor_dsnu
            sensor.sigma_gain_fpn = self.sensor_prnu
            sensor.analog_gain = self.sensor_analog_gain
            sensor.analog_offset = self.sensor_analog_offset
            
            # sensor.pixel = pixel
            
            sensor.compute(oi)
            sensor_img = sensor.get_image(gamma = 1)
            
            # Ensure image data is in uint8 format
            sensor_img = (sensor_img * 255).astype(np.uint8)
            
            # Get the rgb values from sensor
            h, w, c = sensor_img.shape
            qimage = QtGui.QImage(sensor_img, w, h, w*c, QtGui.QImage.Format_RGB888)
            pixmap = QtGui.QPixmap.fromImage(qimage)            
            
        ### ISP ###
        # Get the objectName from the ISP combobox
        # isp_name = self.isp_comboBox.currentText()
        
        
        ### OBJECT DETECTION ###
        # Get the objectName fromt the object detection bombobox
        # objectdetection_name = self.objectdetection_comboBox.currentText()
        
        
        # Set the graphicsView window with desired image            
        main_window = QtWidgets.QGraphicsScene()
        
        # Resize pixmap to fit the window size
        main_window_width = self.graphicsView.width()
        main_window_height = self.graphicsView.height()
        scaled_pixmap = pixmap.scaled(main_window_width, main_window_height, QtCore.Qt.KeepAspectRatio)
        main_window.addPixmap(scaled_pixmap)   
        
        self.graphicsView.setScene(main_window)
    
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Camera Simulator"))
        self.illuminant_label.setText(_translate("MainWindow", "Illuminant"))
        self.illuminant_comboBox.setItemText(1, _translate("MainWindow", "D50"))
        self.illuminant_comboBox.setItemText(2, _translate("MainWindow", "D55"))
        self.illuminant_comboBox.setItemText(3, _translate("MainWindow", "D65"))
        self.illuminant_comboBox.setItemText(4, _translate("MainWindow", "D75"))
        self.illuminant_comboBox.setItemText(5, _translate("MainWindow", "illuminant A"))
        self.illuminant_comboBox.setItemText(6, _translate("MainWindow", "illuminant B"))
        self.illuminant_comboBox.setItemText(7, _translate("MainWindow", "illuminant C"))
        self.illuminant_comboBox.setItemText(8, _translate("MainWindow", "Fluorescent"))
        self.illuminant_comboBox.setItemText(9, _translate("MainWindow", "Tungsten"))
        self.scene_label.setText(_translate("MainWindow", "Scene"))
        self.optics_label.setText(_translate("MainWindow", "Optics"))
        self.Runsimulation_pushButton.setText(_translate("MainWindow", "Run Simulation"))
        self.sensor_label.setText(_translate("MainWindow", "Sensor"))
        self.isp_label.setText(_translate("MainWindow", "ISP"))
        self.objectdetection_label.setText(_translate("MainWindow", "Object Detection"))
        self.reset_pushButton.setText(_translate("MainWindow", "Reset All"))
        self.illuminant_reset.setText(_translate("MainWindow", "Reset"))
        self.scene_comboBox.setItemText(1, _translate("MainWindow", "Macbeth Chart"))
        self.scene_comboBox.setItemText(2, _translate("MainWindow", "Point Array"))
        self.scene_comboBox.setItemText(3, _translate("MainWindow", "Gridlines"))
        self.scene_comboBox.setItemText(4, _translate("MainWindow", "Slanted Edge"))
        self.scene_comboBox.setItemText(5, _translate("MainWindow", "Rings Rays"))
        self.optics_comboBox.setItemText(1, _translate("MainWindow", "Example"))
        self.optics_comboBox.setItemText(2, _translate("MainWindow", "Cooke Triplet"))
        self.optics_comboBox.setItemText(3, _translate("MainWindow", "Double-Gauss"))
        self.optics_comboBox.setItemText(4, _translate("MainWindow", "FishEye"))
        self.optics_comboBox.setItemText(5, _translate("MainWindow", "WideAngle"))
        self.sensor_comboBox.setItemText(1, _translate("MainWindow", "Bayer-grbg"))
        self.sensor_comboBox.setItemText(2, _translate("MainWindow", "Bayer-rggb"))
        self.sensor_comboBox.setItemText(3, _translate("MainWindow", "Bayer-bggr"))
        self.sensor_comboBox.setItemText(4, _translate("MainWindow", "Bayer-gbrg"))
        self.sensor_comboBox.setItemText(5, _translate("MainWindow", "Bayer-ycmy"))
        self.sensor_comboBox.setItemText(6, _translate("MainWindow", "Bayer-cyym"))
        self.sensor_comboBox.setItemText(7, _translate("MainWindow", "MT9V024"))
        self.sensor_comboBox.setItemText(8, _translate("MainWindow", "AR0132AT"))
        self.sensor_comboBox.setItemText(9, _translate("MainWindow", "IMX363"))
        self.sensor_comboBox.setItemText(10, _translate("MainWindow", "IMX490-Large"))
        self.sensor_comboBox.setItemText(11, _translate("MainWindow", "IMX490-Small"))
        self.sensor_comboBox.setItemText(12, _translate("MainWindow", "Nikon-D100"))
        self.isp_comboBox.setItemText(1, _translate("MainWindow", "Bilinear"))
        self.isp_comboBox.setItemText(2, _translate("MainWindow", "Adaptive Laplacian"))
        self.isp_comboBox.setItemText(3, _translate("MainWindow", "Laplacian"))
        self.isp_comboBox.setItemText(4, _translate("MainWindow", "Nearest Neighbor"))
        self.objectdetection_comboBox.setItemText(1, _translate("MainWindow", "DETR"))
        self.objectdetection_comboBox.setItemText(2, _translate("MainWindow", "YOLO"))
        self.scene_reset.setText(_translate("MainWindow", "Reset"))
        self.optics_reset.setText(_translate("MainWindow", "Reset"))
        self.sensor_reset.setText(_translate("MainWindow", "Reset"))
        self.isp_reset.setText(_translate("MainWindow", "Reset"))
        self.objectdetection_reset.setText(_translate("MainWindow", "Reset"))
        self.mode_label.setText(_translate("MainWindow", "Mode"))
        self.mode_comboBox.setItemText(0, _translate("MainWindow", "Design Optimization"))
        self.mode_comboBox.setItemText(1, _translate("MainWindow", "Failure Analysis"))
        self.illuminant_parameters.setText(_translate("MainWindow", "Parameters"))
        self.sensor_parameters.setText(_translate("MainWindow", "Parameters"))
        self.scene_parameters.setText(_translate("MainWindow", "Parameters"))
        self.isp_parameters.setText(_translate("MainWindow", "Parameters"))
        self.optics_parameters.setText(_translate("MainWindow", "Parameters"))
        self.objectdetection_parameters.setText(_translate("MainWindow", "Parameters"))
        self.actuator_parameters.setText(_translate("MainWindow", "Parameters"))
        self.actuator_reset.setText(_translate("MainWindow", "Reset"))
        self.actuator_label.setText(_translate("MainWindow", "Actuator"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionSave.setText(_translate("MainWindow", "Save"))
        
        
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())